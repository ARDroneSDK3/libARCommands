/********************************************
 *            AUTOGENERATED FILE            *
 *             DO NOT MODIFY IT             *
 *                                          *
 * To add new commands :                    *
 *  - Modify ../../Xml/commands.xml file    *
 *  - Re-run generateCommandsList.py script *
 *                                          *
 ********************************************/

#ifndef _LIBARCOMMANDS_COMMANDS_LIST_H_
#define _LIBARCOMMANDS_COMMANDS_LIST_H_ (1)

#include <libARCommands/commandsTypes.h>

typedef enum {
    COMMAND_TYPE_PILOTING = 0,
    COMMAND_TYPE_CONFIG,
    COMMAND_TYPE_TEST,
    COMMAND_TYPE_MAX,
} eLIBARCOMMANDS_COMMAND_TYPE;


typedef enum {
    PILOTING_CMD_TAKEOFF = 0,
    PILOTING_CMD_PCMD,
    PILOTING_CMD_LANDING,
    PILOTING_CMD_MAX,
} eLIBARCOMMANDS_PILOTING_CMD;

typedef enum {
    CONFIG_CMD_SSID = 0,
    CONFIG_CMD_ANGLE_MAX,
    CONFIG_CMD_MAX,
} eLIBARCOMMANDS_CONFIG_CMD;

typedef enum {
    TEST_CMD_U8 = 0,
    TEST_CMD_I8,
    TEST_CMD_U16,
    TEST_CMD_I16,
    TEST_CMD_U32,
    TEST_CMD_I32,
    TEST_CMD_U64,
    TEST_CMD_I64,
    TEST_CMD_FLOAT,
    TEST_CMD_DOUBLE,
    TEST_CMD_STRING,
    TEST_CMD_MAX,
} eLIBARCOMMANDS_TEST_CMD;


extern libARCommandsCmd_t ***libARCommandsCmdList;
extern int *libARCommandsCmdTypesMaxId;
extern int libARCommandsListInitOk;

int libARCommandsListInit ();
void libARCommandsListDestroy ();

#endif /* _LIBARCOMMANDS_COMMANDS_LIST_H_ */
