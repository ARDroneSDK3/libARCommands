from xml.dom.minidom import parseString
import sys

file = open ('./commands.xml', 'r')
data = file.read ()
file.close ()

cfile = open ('../Sources/commandsList.c', 'w')
hfile = open ('../Includes/libARCommands/commandsList.h', 'w')

xmlfile = parseString (data)

allclasses = []
allclassesNames = []

classes = xmlfile.getElementsByTagName('class')
cfile.write ('/********************************************\n')
cfile.write (' *            AUTOGENERATED FILE            *\n')
cfile.write (' *             DO NOT MODIFY IT             *\n')
cfile.write (' *                                          *\n')
cfile.write (' * To add new commands :                    *\n')
cfile.write (' *  - Modify ../Xml/commands.xml file       *\n')
cfile.write (' *  - Re-run generateCommandsList.py script *\n')
cfile.write (' *                                          *\n')
cfile.write (' ********************************************/\n')
cfile.write ('#include <libARCommands/commandsList.h>\n')
cfile.write ('#include <libSAL/print.h>\n')
cfile.write ('#include <stdlib.h>\n')
cfile.write ('\n')
cfile.write ('libARCommandsCmd_t ***libARCommandsCmdList = NULL;\n')
cfile.write ('int *libARCommandsCmdClassesMaxId = NULL;\n')
cfile.write ('int libARCommandsListInitOk = 0;\n')
cfile.write ('\n')
cfile.write ('\n')
for cmdclass in classes:
    classname = cmdclass.attributes["name"].nodeValue
    cfile.write ('libARCommandsCmd_t **' + classname + 'CommandsList = NULL;\n')
    cfile.write ('\n')
    allclassesNames.append (classname)
    currclass = []
    commands = cmdclass.getElementsByTagName('cmd')
    for command in commands:
        commandname = command.attributes["name"].nodeValue
        cfile.write ('libARCommandsCmd_t ' + classname + '_' + commandname + '_cmd = { ')
        currclass.append (commandname)
        args = command.getElementsByTagName('arg')
        for arg in args:
            argclass = arg.attributes["type"].nodeValue.upper ()
            cfile.write ('LIBARCOMMANDS_ARG_TYPE_' + argclass + ', ')
        cfile.write ('LIBARCOMMANDS_ARG_TYPE_END };\n')
    allclasses.append(currclass)
    cfile.write ('\n')

cfile.write ('\n')
cfile.write ('\n')
cfile.write ('int libARCommandsListInit ()\n')
cfile.write ('{\n')
cfile.write ('    int res = 1;\n')
cfile.write ('    if (1 == libARCommandsListInitOk)\n')
cfile.write ('    {\n')
cfile.write ('        return libARCommandsListInitOk;\n')
cfile.write ('    }\n')
cfile.write ('\n')
for curclass in allclassesNames:
    cfile.write ('    if (1 == res)\n')
    cfile.write ('    {\n')
    sname = curclass + 'CommandsList'
    cfile.write ('        ' + sname + ' = calloc (' + curclass.upper () + '_CMD_MAX, sizeof (libARCommandsCmd_t));\n')
    cfile.write ('        if (NULL != ' + sname + ')\n')
    cfile.write ('        {\n')
    cmdlist = allclasses [allclassesNames.index (curclass)]
    for cmd in cmdlist:
        cfile.write ('            ' + sname + ' [' + curclass.upper () + '_CMD_' + cmd.upper () + '] = &' + curclass + '_' + cmd + '_cmd;\n')
    cfile.write ('        }\n')
    cfile.write ('        else\n')
    cfile.write ('        {\n')
    cfile.write ('            res = 0;\n')
    cfile.write ('        }\n')
    cfile.write ('    }\n')
    cfile.write ('\n')
cfile.write ('\n')

cfile.write ('    if (1 == res)\n')
cfile.write ('    {\n')
cfile.write ('        libARCommandsCmdList = calloc (COMMAND_CLASS_MAX, sizeof (libARCommandsCmd_t *));\n')
cfile.write ('        if (NULL != libARCommandsCmdList)\n')
cfile.write ('        {\n')
for curclass in allclassesNames:
    cfile.write ('            libARCommandsCmdList [COMMAND_CLASS_' + curclass.upper () + '] = ' + curclass + 'CommandsList;\n')
cfile.write ('        }\n')
cfile.write ('        else\n')
cfile.write ('        {\n')
cfile.write ('            res = 0;\n')
cfile.write ('        }\n')
cfile.write ('    }\n')
cfile.write ('\n')

cfile.write ('    if (1 == res)\n')
cfile.write ('    {\n')
cfile.write ('        libARCommandsCmdClassesMaxId = calloc (COMMAND_CLASS_MAX, sizeof (int));\n')
cfile.write ('        if (NULL != libARCommandsCmdClassesMaxId)\n')
cfile.write ('        {\n')
for curclass in allclassesNames:
    cfile.write ('            libARCommandsCmdClassesMaxId [COMMAND_CLASS_' + curclass.upper () + '] = ' + curclass.upper () + '_CMD_MAX;\n')
cfile.write ('        }\n')
cfile.write ('        else\n')
cfile.write ('        {\n')
cfile.write ('            res = 0;\n')
cfile.write ('        }\n')
cfile.write ('    }\n')
cfile.write ('\n')

cfile.write ('    if (0 == res)\n')
cfile.write ('    {\n')
cfile.write ('        libARCommandsListDestroy ();\n')
cfile.write ('    }\n')
cfile.write ('    else\n')
cfile.write ('    {\n')
cfile.write ('        libARCommandsListInitOk = res;\n')
cfile.write ('    }\n')
cfile.write ('    return res;\n')
cfile.write ('}\n')
cfile.write ('\n')
cfile.write ('\n')

cfile.write ('void libARCommandsListDestroy ()\n')
cfile.write ('{\n')
for curclass in allclassesNames:
    sname = curclass + 'CommandsList'
    cfile.write ('    if (NULL != ' + sname + ') { free (' + sname + '); ' + sname + ' = NULL; }\n')
cfile.write ('    if (NULL != libARCommandsCmdList) { free (libARCommandsCmdList); libARCommandsCmdList = NULL; }\n')
cfile.write ('    if (NULL != libARCommandsCmdClassesMaxId) { free (libARCommandsCmdClassesMaxId); libARCommandsCmdClassesMaxId = NULL; }\n')
cfile.write ('    libARCommandsListInitOk = 0;\n')
cfile.write ('}\n')
cfile.write ('\n')


cfile.write ('libARCommandsCmd_t *getCommandArgsWithClassAndId (eLIBARCOMMANDS_COMMAND_CLASS class, int id)\n')
cfile.write ('{\n')
cfile.write ('    libARCommandsCmd_t *retVal = NULL;\n')
cfile.write ('    int maxId = 0;\n')
cfile.write ('\n')
cfile.write ('    if (0 == libARCommandsListInitOk && 1 != libARCommandsListInit ())\n')
cfile.write ('    {\n')
cfile.write ('        SAL_PRINT (PRINT_ERROR, "Unable to initialize libARCommandsList\\n");\n')
cfile.write ('        return NULL;\n')
cfile.write ('    }\n')
cfile.write ('    if (COMMAND_CLASS_MAX <= class)\n')
cfile.write ('    {\n')
cfile.write ('        SAL_PRINT (PRINT_DEBUG, "Class %d is unknown (I know only %d classes)\\n", class, COMMAND_CLASS_MAX);\n')
cfile.write ('        return NULL;\n')
cfile.write ('    }\n')
cfile.write ('    maxId = libARCommandsCmdClassesMaxId [class];\n')
cfile.write ('    if (maxId <= id)\n')
cfile.write ('    {\n')
cfile.write ('        SAL_PRINT (PRINT_DEBUG, "Id %d is unknown for class %d (I know only %d id to this class)\\n", id, class, maxId);\n')
cfile.write ('        return NULL;\n')
cfile.write ('    }\n')
cfile.write ('    return libARCommandsCmdList [class][id];\n')
cfile.write ('}\n')

cfile.close ()



hfile.write ('/********************************************\n')
hfile.write (' *            AUTOGENERATED FILE            *\n')
hfile.write (' *             DO NOT MODIFY IT             *\n')
hfile.write (' *                                          *\n')
hfile.write (' * To add new commands :                    *\n')
hfile.write (' *  - Modify ../../Xml/commands.xml file    *\n')
hfile.write (' *  - Re-run generateCommandsList.py script *\n')
hfile.write (' *                                          *\n')
hfile.write (' ********************************************/\n')
hfile.write ('\n')
hfile.write ('#ifndef _LIBARCOMMANDS_COMMANDS_LIST_H_\n')
hfile.write ('#define _LIBARCOMMANDS_COMMANDS_LIST_H_ (1)\n')
hfile.write ('\n')
hfile.write ('#include <libARCommands/commandsTypes.h>\n')
hfile.write ('\n')
hfile.write ('typedef enum {\n')
first = 1
for curclass in allclassesNames:
    if 1 == first:
        hfile.write ('    COMMAND_CLASS_' + curclass.upper () + ' = 0,\n')
        first = 0
    else:
        hfile.write ('    COMMAND_CLASS_' + curclass.upper () + ',\n')
hfile.write ('    COMMAND_CLASS_MAX,\n')
hfile.write ('} eLIBARCOMMANDS_COMMAND_CLASS;\n')
hfile.write ('\n')
hfile.write ('\n')
for curclass in allclasses:
    hfile.write ('typedef enum {\n')
    tname = allclassesNames[allclasses.index(curclass)].upper()
    first = 1
    for cmd in curclass:
        if 1 == first:
            hfile.write ('    ' + tname + '_CMD_' + cmd.upper () + ' = 0,\n')
            first = 0
        else:
            hfile.write ('    ' + tname + '_CMD_' + cmd.upper () + ',\n')
    hfile.write ('    ' + tname  + '_CMD_MAX,\n')
    hfile.write ('} eLIBARCOMMANDS_' + tname + '_CMD;\n')
    hfile.write ('\n')

hfile.write ('\n')
hfile.write ('extern libARCommandsCmd_t ***libARCommandsCmdList;\n')
hfile.write ('extern int *libARCommandsCmdClassesMaxId;\n')
hfile.write ('extern int libARCommandsListInitOk;\n')
hfile.write ('\n')
hfile.write ('int libARCommandsListInit ();\n')
hfile.write ('void libARCommandsListDestroy ();\n')
hfile.write ('libARCommandsCmd_t *getCommandArgsWithClassAndId (eLIBARCOMMANDS_COMMAND_CLASS class, int id);\n')
hfile.write ('\n')
hfile.write ('#endif /* _LIBARCOMMANDS_COMMANDS_LIST_H_ */\n')

hfile.close ()
